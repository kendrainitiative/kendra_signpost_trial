<?php
// $Id$

/**
 * @file
 * The module which exposes services related to kendra_search
 */

define('KENDRA_SEARCH_SERVICE_PERM', 'load CSV mappings data');
define('KENDRA_SEARCH_CACHE_PREFIX', 'kendra_search_tmpl_');

/**
 * Implementation of hook_perm()
 **/
function KENDRA_SEARCH_SERVICE_PERM() {
	return array(KENDRA_SEARCH_SERVICE_PERM);
}

/**
 * Function to check user access
 **/
function kendra_search_service_access($account) {
	return user_access(KENDRA_SEARCH_SERVICE_PERM, $account);
}

/**
 * Returns an array of mappings
 * explose the mapping array as an array( 'mapping URI' => 'translated name' )
 */
function kendra_search_service_get_mappings_array() {
	$mappings = kendra_search_get_array();

	if (!$mappings) {
		return services_error(t('No mappings were found.'));
	}
	return $mappings;
}

/**
 * Implementation of hook_service()
 **/
function kendra_search_service_service() {
	return array(
	array(
      '#method'   => 'kendra_search.get_mappings_array',
      '#callback' => 'kendra_search_service_get_mappings_array',
      '#key'      => FALSE,
	  '#auth' => FALSE,
	  '#access arguments' => array('administer nodes'), // @fixme
      '#args'     => array(
	array(
          '#name'         => 'first element value',
          '#type'         => 'string',
          '#description'  => t("The value of the first element in the array (defaults to '')"),
          '#optional'     => TRUE,
	),
	array(
          '#name'         => 'first element label',
          '#type'         => 'string',
          '#description'  => t("The label of the first value in the array (defaults to 'Please Choose')"),
          '#optional'     => TRUE,
	),
	),
      '#return'   => 'array',
      '#help'     => t('Returns an associative array in $mapping["URI"] => $mapping["printable_name"] format.'),
	),
	array(
      '#method'   => 'kendra_search.get_template',
      '#callback' => 'kendra_search_service_get_template',
      '#key'      => FALSE,
	  '#access arguments' => array('administer nodes'), // @fixme
	  '#auth' => FALSE,
      '#args'     => array(
	array(
          '#name'         => 'template_name',
          '#type'         => 'string',
          '#description'  => t("The name of the JQuery template"),
          '#optional'     => FALSE,
	),
	array(
          '#name'         => 'parent_type',
          '#type'         => 'string',
          '#description'  => t("parent item type (i.e. theme, theme_engine, module, profile)"),
          '#optional'     => TRUE,
	),
	array(
          '#name'         => 'parent_name',
          '#type'         => 'string',
          '#description'  => t("parent item name (i.e. module or theme name)"),
          '#optional'     => TRUE,
	),
	array(
          '#name'         => 'subdirectory',
          '#type'         => 'string',
          '#description'  => t("directory within the parent container; should have leading and trailing slashes"),
          '#optional'     => TRUE,
	),
	),
      '#return'   => 'array',
      '#help'     => t('Returns a JQuery template.'),
	)
	);
}

/**
 * kendra_search_service_get_template
 *
 * returns the contents of a (cached) JQuery template file
 * removes PHP tags, comments, and excess whitespace from the template body
 *
 * @param $filename String
 * @param $parent_type String parent item type (i.e. theme, theme_engine, module, profile)
 * @param $parent_name String parent item name (i.e. module or theme name)
 * @param $subdirectory String optional directory within the parent container; should have leading and trailing slashes
 */
function kendra_search_service_get_template($filename, $parent_type = 'module', $parent_name = 'help', $subdirectory = '/') {

	$cache_key = KENDRA_SEARCH_CACHE_PREFIX.$filename;

	$debugging = TRUE;

	if (!$debugging && $cache = cache_get($cache_key)) {
		$data = $cache->data;
	} else {
		$path = drupal_get_path($parent_type, $parent_name);
		$fullpath = $path . $subdirectory . $filename;

		if (!file_check_location($fullpath, $path) || !is_file($fullpath))
		return services_error(t('The requested template @fullpath was not found.', array('@fullpath'=>$fullpath)));

		ob_start();
		include( $fullpath );
		$data = ob_get_contents();
		ob_end_clean();

		if (!drupal_validate_utf8($data))
		return services_error(t('The requested template @fullpath was not valid.', array('@fullpath'=>$fullpath)));

		// strip PHP tags, comments, and excess whitespace from the template body
		$data = preg_replace(array('/<\?((?!\?>).)*\?>/sU', '/<!\-\-(.+)\-\->/U', '/\s\s+/s'), array('', '', ' '), $data);
		cache_set($cache_key, $data);
	}

	return $data;
}

/**
 * Implementation of hook_init().
 */
function kendra_search_service_init() {
}

/**
 * Implementation of hook_disable()
 **/
function kendra_search_disable() {
	cache_clear_all('services:methods', 'cache');
	cache_clear_all(KENDRA_SEARCH_CACHE_PREFIX, 'cache', true);
}

/**
 * Implementation of hook_enable()
 **/
function kendra_search_enable() {
	cache_clear_all('services:methods', 'cache');
	cache_clear_all(KENDRA_SEARCH_CACHE_PREFIX, 'cache', true);
}

/**
 * Implementation of hook_help()
 */
function kendra_search_service_help($path, $arg) {
	// switch over section
	switch ($path) {
		case 'admin/help#kendra_search_service':
			$content = '<p>' . t("Please see !module_url", array('!module_url'=> l("the Kendra Atrium", "http://atrium.kendra.org.uk/dev/kendra-signpost"))) . '</p>';
			$content = '<p>' . t("Requires kendra_search_service.module.") . '</p>';

			break;
		default:
			$content = "";
	}
	return $content;
}
