<?php
// $Id$

/**
 * Provides a Feeds plugin extension to parse P2P-Next programmes.
 * @file
 */

/**
 * implementation of hook_help.
 */ /*
function p2pnextprogrammefeed_help($path, $arg) {
  
  if ($path == 'admin/help#p2pnextprogrammefeed') {
    $txt = 'Provides a Feeds plugin extension to parse P2P-Next programmes.';
    $replace = array();
    return '<p>'. t($txt, $replace) .'</p>';
  }
}
*/
/**
 * Implements hook_node_info()
 */ /*
function p2pnextprogrammefeed_node_info() {
  return array(
    'p2pnextprogrammefeed' => array(
      'module' => 'p2pnextprogrammefeed',
      'name' => t('P2P-Next programme feed'),
      'description' => t("A P2P-Next programme feed."),
      'has_title' => true,
      'title_label' => t('P2P-Next programme title'),
      'has_body' => false,
      //'body_label' => t(''),
    )
  );
}
*/
/**
 * Implements hook_menu_alter()
 */ /*
function p2pnextprogrammefeed_menu_alter(&$callbacks) {
  // remove the direct link "Create content -->  P2P-Next programme feed"
  $callbacks['node/add/p2pnextprogrammefeed']['access callback'] = FALSE;
  unset($callbacks['node/add/p2pnextprogrammefeed']['access arguments']);
} */

/**
 * Implementation of hook_menu
 *
 */ /*
function p2pnextprogrammefeed_menu() {
  $items['admin/settings/p2pnextprogrammefeed'] = array(
    'title' => 'P2P-Next Atom feed export settings',
    'description' => 'Enable channels for Atom feed export',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('p2pnextprogrammefeed_admin_settings'),
	'access arguments' => array('administer site configuration'),
	'type' => MENU_NORMAL_ITEM,
  );
  return $items;
} */
/*
function p2pnextprogrammefeed_admin_settings() {

  $result = db_query("SELECT nid FROM {content_type_channel}");
  $items = array();
  while ($row = db_fetch_object($result)) {
    $chan = node_load($row->nid);
    $options[$chan->title] = $chan->title;
  }  
  $form['p2pnextprogrammefeed_feed_channels'] = array(
    '#type' => 'checkboxes', 
    '#title' => t('Checked channels are enabled for Atom feed export'),
    '#options' => $options,
	'#default_value' => variable_get('p2pnextprogrammefeed_feed_channels', array()),
    '#description' => t('Select which channels are enabled for Atom feed export'),	
  );
  // return $form;
  return system_settings_form($form);
} */

/**
 * Implementation of hook_cron
 * Delete all programmes which are 'live' programmes and which has been inserted 
 * into the database more that 24 hours ago. 
 *
 * There is one exception here: Fabchannel LIVE must be updated everyday at 10:00 o'clock
 * TODO: Create db query and code for that 10:00 update.
 */ /*
function p2pnextprogrammefeed_cron(){
/* Update 2010-11-26:
     Administer -> User management -> Permissions -> node module ->
       delete own channel content
       delete own programme content

        check rights to "anonymous user"
   cron runs with "anonymous" privileges, so now the cron is 
   able to delete old nodes.
*/ /*
  $expired_time = strtotime("-24 hours");
  $query =
    "SELECT node.nid AS nid FROM node node LEFT JOIN content_type_programme node_data_field_availability_period_type ON node.vid = node_data_field_availability_period_type.vid WHERE (node.type in ('programme')) AND ((node_data_field_availability_period_type.field_availability_period_type_value) = ('live')) AND (node.created < '%s')";
  $queryResult = db_query($query, $expired_time);
  while ($node = db_fetch_object($queryResult)) {
    node_delete($node->nid);
  }
  
  // AT 10:00 o'clock UPDATE ALL PROGRAMMES FROM CHANNEL urn:fabchannel-live.
  // ISO 8601 date (added in PHP 5) 	2004-02-12T15:19:21+00:00
  $fab_now = date('c',time());
  $fab_update_time = substr($fab_now,11,5);
  if($fab_update_time == '10:00') {
    $query =
        "SELECT node.nid AS nid FROM node node INNER JOIN content_type_programme node_data_field_availability_period_type ON node.vid = node_data_field_availability_period_type.vid LEFT JOIN content_type_programme node_data_field_channel_id ON node.vid = node_data_field_channel_id.vid WHERE (node.type in ('programme')) AND (node_data_field_availability_period_type.field_availability_period_type_value = 'live') AND ((node_data_field_channel_id.field_channel_id_value) = ('urn:fabchannel-live'))";
    $queryResult = db_query($query);
    while ($node = db_fetch_object($queryResult)) {
      node_delete($node->nid);
    }
  }
}
*/
/** BEWARE: If these two functions are used: hook_delete() and hook_nodeapi(), Drupal CRASHES for some reason !!!!!! **/
/** MAYBE they should be moved to "programme.module" **/

/**
 * implements hook_delete()
 */
/*function p2pnextprogrammefeed_delete($node) {
  
  db_query('DELETE FROM {programme} WHERE nid = %d', $node->nid);
}*/

/**
 * Implements hook_nodeapi()
 * This handles deleting revisions.
 */
/*function p2pnextprogrammefeed_nodeapi(&$node, $op, $teaser, $page) {
  
  if ($op == 'delete revision') {
    db_query('DELETE FROM {programme} WHERE vid = %d', $node->vid);
  }
}*/

/**
 * Implementation of hook_perm()
 */ /*
function p2pnextprogrammefeed_perm() {
  return array('create programme', 'edit own programme');
} */

/*
 * Implementation of hook_access()
*/ /*
function p2pnextprogrammefeed_access($op, $node, $account) {

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create programme', $account);
  }

  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own programme', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }
}
*/
// ======================================
// Database:
// ======================================

/**
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
/*function p2pnextchannelfeed_insert($node) {
  
  db_query(
    'INSERT INTO {p2pnext_channel} (vid, nid, '
	  .'title, link, category, id, updated, image) '
      ."VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s')", 
    $node->vid, 
    $node->nid, 
	$node->title,
    $node->category,
    $node->id,
	$node->p2pnext_image
  );
}*/

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
/*function p2pnextchannelfeed_update($node) {
  if ($node->revision) { // Node is new or a revision. See node_example.module.
    p2pnextchannelfeed_insert($node);
  } 
  else {
    db_query("UPDATE {p2pnext_channel} "
	  ."SET field_category = '%s', field_id = '%s', image = '%s' "
      ."WHERE vid = %d", 
      $node->category,
      $node->id,
	  $node->p2pnext_image,
      $node->vid
    );
  }
}*/

/**
 * implements hook_delete()
 */
  // hook_delete() MOVED TO programme.module
/*function p2pnextprogrammefeed_delete($node) {
  db_query('DELETE FROM {programme} WHERE nid = %d', $node->nid);
}*/

/**
 * Implements hook_nodeapi()
 * This handles deleting revisions.
 */ /*
function p2pnextprogrammefeed_nodeapi(&$node, $op, $teaser, $page) {

  global $base_url, $base_path, $language;

  // 'delete revision' MOVED TO programme.module
  /*if ($op == 'delete revision') {
    db_query('DELETE FROM {programme} WHERE vid = %d', $node->vid);
  }*/
  
  
  /* We can assign "derived" values here, for example feed gives duration (in seconds) 
     but at the user interface it's more comfortable to input duration as hours and minutes, 
     like in ISO8601 format (PT1H35M). To support these, there is three fields in DB 
	 which deal with duration:
	 
	 field_duration_value                  INT      (for ATOM feed)
	 field_input_duration_iso8601          VARCHAR  (from duration module to support duration input fields)
	 field_input_duration_approx_seconds   INT      (from duration module to support duration input fields)
	 
	 so here we can set and assign those two fields when ATOM feed is parsed. */
	 /*
  if($op == 'presave') {
    if($node->type == 'channel') {
	  $node->field_id_url[0]['value'] = substr($node->field_id[0]['value'],4); // Strip the "urn:" part.
	}
    if($node->type == 'programme') {
	  
	  /*
      $str = print_r($node, TRUE);
      $filename = 'debug_presave_programme.txt';
      $dest = file_directory_path() . '/' . $filename;
      file_save_data($str, $dest);*/

      // FABCHANNEL LIVE CHANNEL IS A SIMULATED CHANNEL!
	  // FIX THE FACT THAT WE ARE NOT GENERATING A NEW PROGRAMME GUIDE EVERY DAY!
	  // This is safe to do like this, because Fabchannel LIVE is simulated only 
	  // from 10:00 to 22:46 everyday, so every programme starts and ends during 
	  // the same day.
	  // Start of Fabchannel LIVE FIX! =>
	  /*
	  if($node->field_channel_id[0]['value'] == 'urn:fabchannel-live') {
		
        // ISO 8601 date (added in PHP 5) 	2004-02-12T15:19:21+00:00
        $iso_8601_start_time = date('c',$node->field_start_time[0]['value']);
        $iso_8601_end_time   = date('c',$node->field_start_time[0]['value2']);
		$iso_8601_now        = date('c',time());
		
		// Change only "year-month-date"-part of the dates (10 first characters)
		$new_iso_8601_start_time = substr($iso_8601_now,0,10).substr($iso_8601_start_time,10);
		$new_iso_8601_end_time = substr($iso_8601_now,0,10).substr($iso_8601_end_time,10);
		$new_start_time = strtotime($new_iso_8601_start_time);
		$new_end_time = strtotime($new_iso_8601_end_time);

		$node->field_start_time[0]['value'] = $new_start_time;
		$node->field_start_time[0]['value2'] = $new_end_time;
	  }
	  // <= End of Fabchannel LIVE FIX!

      $s = $node->field_duration[0]['value']; // in seconds
	  $node->field_input_duration[0]['approx_seconds'] = $s;
	  
	  $h = (int)($s/3600);
	  if($h > 0) $s -= $h*3600;
	  $m = (int)($s/60);
	  if($m > 0) $s -= $m*60;
	  
	  $res = 'PT';
	  if($h > 0) $res .= $h.'H';
	  if($m > 0) $res .= $m.'M';
	  if($s > 0) $res .= $s.'S';
	  $node->field_input_duration[0]['iso8601'] = $res;
	  
	  $node->field_channel_id_url[0]['value'] = substr($node->field_channel_id[0]['value'],4); // Strip the "urn:" part.
	  $node->field_programme_id_url[0]['value'] = substr($node->field_programme_id[0]['value'],4); // Strip the "urn:" part.
	}
  } */
/*
THIS IS WHAT IT SHOULD BE (FOR CHANNEL):
<entry>
  <title>BBC One London</title>
  <link type="application/atom+xml" href="http://p2pnextfeed1.rad0.net/content/feed/bbc/bbcone" />
  <category term="tv" scheme="urn:service-type" />
  <id>urn:bbc-bbcone</id>
  <updated>2010-11-17T00:10:00Z</updated>
  <p2pnext:image src="http://p2pnextfeed1.rad0.net/images/bbcone.png" />
</entry>
AND THIS IS WHAT THERE IS:
<item>
  <title>BBC One London</title>
  <link>http://p2pnextportal.vtt.fi/content/bbc-one-london-12</link>
  <description></description>
  <pubDate>Wed, 17 Nov 2010 03:16:15 +0000</pubDate>
  <dc:creator>timokin</dc:creator>
  <guid isPermaLink="false">6021 at http://p2pnextportal.vtt.fi</guid>
</item>
*/

 /* NOTE: 2010-11-26 UPDATE: Do not include "urn:" in Atom feed links. */
 /* if($op == 'rss item') { // The node is being included as part of an RSS feed.
    if($node->type == 'channel') {
	  $id        = $node->field_id[0]['value'];
	  $chan_id_url = $node->field_id_url[0]['value'];
	  $link     = $base_url . $base_path . 'programmes/' . $chan_id_url . '/feed';
	  $cat_term = $node->field_category[0]['value'];
      $updated  = date('c',$node->changed);
      $logo     = $base_url . $base_path . $node->field_channel_logo[0]['filepath'];
      $rss_items = array();
	  $rss_items[] = array(
        'key' => 'link',
        'attributes' => array(
          'type' => 'application/atom+xml',
		  'href' => $link,
        ),
        'value' => '',
      ); 
	  $rss_items[] = array(
        'key' => 'category',
        'attributes' => array(
          'term' => $cat_term,
          'scheme' => 'urn:service-type',
        ),
        'value' => '',
      ); 
      $rss_items[] = array(
        'key' => 'id',
        'value' => $id,
      ); 
      $rss_items[] = array(
        'key' => 'updated',
        'value' => $updated,
      ); 
      $rss_items[] = array(
        'key' => 'p2pnext:image',
        'attributes' => array(
          'src' => $logo,
        ),
        'value' => '',
      ); 
      return $rss_items;
    }
    if($node->type == 'programme') {
      // Add some custom tags into feed 
	  $pid      = $node->field_programme_id[0]['value'];
	  $cid      = $node->field_channel_id[0]['value'];
	  
	  // id's with "urn:" stripped off.
	  $chan_id_url = $node->field_channel_id_url[0]['value'];
	  $prog_id_url = $node->field_programme_id_url[0]['value'];
	  
	  $chan_name = $node->field_channel_name[0]['value'];
	  $prog_name = $node->title;
	  
	  //$link     = $base_url . $base_path . 'programmes/' . $cid . '/' . $pid . '/feed';
	  $link     = $base_url . $base_path . 'programmes/' . $chan_id_url . '/' . $prog_id_url . '/feed';
      $summary  = $node->field_annotation[0]['value'];
      $updated  = date('c',$node->changed);
      $image_source = $base_url . $base_path . $node->field_programme_thumbnail[0]['filepath'];

	  $producer     = $node->field_producer[0]['value'];
	  $disseminator = $node->field_disseminator[0]['value'];
	  $copyright    = $node->field_copyrightstring[0]['value'];
      $torrent_url  = $base_url . $base_path . $node->field_torrent_file[0]['filepath'];
	  $duration     = $node->field_input_duration[0]['iso8601'];
	  $availability_period_type = $node->field_availability_period_type[0]['value'];
      $start_time = date('c',$node->field_start_time[0]['value']);
	  
      $rss_items = array();
	  $rss_items[] = array(
        'key' => 'link',
        'attributes' => array(
          'type' => 'application/xml',
		  'href' => $link,
        ),
        'value' => '',
      );
      $rss_items[] = array(
        'key' => 'id',
        'value' => $pid,
      ); 
      $rss_items[] = array(
        'key' => 'updated',
        'value' => $updated,
      ); 
      $rss_items[] = array(
        'key' => 'summary',
        'value' => $summary,
      ); 
      $rss_items[] = array(
        'key' => 'p2pnext:image',
        'attributes' => array(
          'src' => $image_source,
        ),
        'value' => '',
      ); 
	  /* These next 9 items goes to Mpeg7 file: */
	  /* There is currently no language support for content -> use global language in title */
	  /*$rss_items[] = array(
		'key' => 'Mpeg7_Title', 
        'attributes' => array(
          'type' => 'main',
		  'xml:lang' => check_plain($language->language),
        ),
		'value' => $node->title,
      );*/ /*
	  $rss_items[] = array(
		'key' => 'Mpeg7_TitleImage', 
		'value' => $image_source,
      );
	  $rss_items[] = array(
		'key' => 'Mpeg7_Abstract', 
		'value' => $summary,
      );
	  $rss_items[] = array(
		'key' => 'Mpeg7_Producer', 
		'value' => $producer,
      );
	  $rss_items[] = array(
		'key' => 'Mpeg7_Disseminator', 
		'value' => $disseminator,
      );
	  $rss_items[] = array(
		'key' => 'Mpeg7_Copyrightstring', 
		'value' => $copyright,
      );
	  $rss_items[] = array(
		'key' => 'Mpeg7_MediaLocator', 
		'value' => $torrent_url,
      );
	  $rss_items[] = array(
        'key' => 'Mpeg7_MediaDuration',
        'value' => $duration,
      );
	  $rss_items[] = array(
        'key' => 'Mpeg7_AvailabilityPeriod',
        'value' => $availability_period_type,
      );
	  $rss_items[] = array(
        'key' => 'Mpeg7_TimePoint',
        'value' => $start_time,
      );
      return $rss_items;
    }
  }
}
*/
// ======================================
// Creating Data:
// ======================================

// ======================================
// Getting Data:
// ======================================

// ======================================
// Theme:
// ======================================

// ======================================
// Feeds plugin:
// ======================================
/**
* Implementation of hook_feeds_plugins().
*/
function p2pnextprogrammefeed_feeds_plugins() {
  $info = array();
  $info['FeedsP2PNextProgrammeFeedParser'] = array(
    'name' => 'Feeds P2P-Next Programme Feed Parser',
    'description' => 'Parses custom data.',
    'handler' => array(
      'parent' => 'FeedsSimplePieParser', //FeedsParser', // A plugin needs to derive either directly or indirectly from FeedsFetcher, FeedsParser or FeedsProcessor.
      'class' => 'FeedsP2PNextProgrammeFeedParser',
      'file' => 'FeedsP2PNextProgrammeFeedParser.inc',
      'path' => drupal_get_path('module', 'p2pnextprogrammefeed'),
    ),
  );
  return $info;
}

/**
* Implementation of hook_feeds_node_processor_targets_alter().
*/
function p2pnextprogrammefeed_feeds_node_processor_targets_alter(&$targets, $content_type) {

  if ($content_type == 'p2pnextprogrammefeed') {

    $targets['field_programme_id'] = array(
      'name' => t('Programme id'),
      'description' => t('Programme id.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
    $targets['field_channel_id'] = array(
      'name' => t('Programme channel'),
      'description' => t('Programme channel.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
    $targets['field_annotation'] = array(
      'name' => t('Programme summary'),
      'description' => t('Programme summary.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
    $targets['field_programme_thumbnail'] = array(
      'name' => t('Programme thumbnail'),
      'description' => t('Programme thumbnail.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
    $targets['field_torrent_file'] = array(
      'name' => t('Programme torrent file'),
      'description' => t('Programme torrent file.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
	// Three new ones...
    $targets['field_producer'] = array(
      'name' => t('Programme producer'),
      'description' => t('Programme producer.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
    $targets['field_disseminator'] = array(
      'name' => t('Programme disseminator'),
      'description' => t('Programme disseminator.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
    $targets['field_copyrightstring'] = array(
      'name' => t('Programme copyright string'),
      'description' => t('Programme copyright string.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
    $targets['field_duration'] = array(
      'name' => t('Programme duration'),
      'description' => t('Programme duration.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
    $targets['field_availability_period_type'] = array(
      'name' => t('Programme availability period type'),
      'description' => t('Programme availability period type.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
    $targets['field_start_time:start'] = array(
      'name' => t('Programme start time'),
      'description' => t('Programme start time.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
    $targets['field_start_time:end'] = array(
      'name' => t('Programme end time'),
      'description' => t('Programme end time.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
	$targets['field_channel_name'] = array(
      'name' => t('Channel user-friendly name'),
      'description' => t('Channel user-friendly name.'),
      'callback' => 'p2pnextprogrammefeed_set_target',
    );
  }
}

/**
* Mapping callback.
*/
function p2pnextprogrammefeed_set_target($node, $target, $value) {
  
  if (!is_array($value)) {
    $node->$target = $value;
  }
}

/**
 * Default definition of 'p2pnext_programme_importer'
 */
function p2pnextprogrammefeed_feeds_importer_default() {

  $export = array();
  
$feeds_importer = new stdClass;
$feeds_importer->disabled = TRUE; /* Edit this to true to make a default feeds_importer disabled initially */
$feeds_importer->api_version = 1;
$feeds_importer->id = 'p2pnext_programme_importer';
$feeds_importer->config = array(
  'name' => 'P2PNext programme importer',
  'description' => '',
  'fetcher' => array(
    'plugin_key' => 'FeedsHTTPFetcher',
    'config' => array(
      'auto_detect_feeds' => FALSE,
      'use_pubsubhubbub' => FALSE,
      'designated_hub' => '',
    ),
  ),
  'parser' => array(
    'plugin_key' => 'FeedsP2PNextProgrammeFeedParser',
    'config' => array(),
  ),
  'processor' => array(
    'plugin_key' => 'FeedsNodeProcessor',
    'config' => array(
      'content_type' => 'programme',
      'update_existing' => 1,
      'expire' => '-1',
      'mappings' => array(
        '0' => array(
          'source' => 'title',
          'target' => 'title',
          'unique' => FALSE,
        ),
        '1' => array(
          'source' => 'pid',
          'target' => 'field_programme_id',
          'unique' => 1,
        ),		
        '2' => array(
          'source' => 'channel',
          'target' => 'field_channel_id',
          'unique' => FALSE,
        ),
        '3' => array(
          'source' => 'summary',
          'target' => 'field_annotation',
          'unique' => FALSE,
        ),
        '4' => array(
          'source' => 'p2pnext_image',
          'target' => 'field_programme_thumbnail',
          'unique' => FALSE,
        ),
        '5' => array(
          'source' => 'torrent',
          'target' => 'field_torrent_file',
          'unique' => FALSE,
        ),
        '6' => array(
          'source' => 'producer',
          'target' => 'field_producer',
          'unique' => FALSE,
        ),
		'7' => array(
          'source' => 'disseminator',
          'target' => 'field_disseminator',
          'unique' => FALSE,
        ),
        '8' => array(
          'source' => 'copyright',
          'target' => 'field_copyrightstring',
          'unique' => FALSE,
        ),
        '9' => array(
          'source' => 'duration',
          'target' => 'field_duration',
          'unique' => FALSE,
        ),
        '10' => array(
          'source' => 'aptype',
          'target' => 'field_availability_period_type',
          'unique' => FALSE,
        ),
        '11' => array(
          'source' => 'starttime',
          'target' => 'field_start_time:start',
          'unique' => FALSE,
        ),
		'12' => array(
          'source' => 'endtime',
          'target' => 'field_start_time:end',
          'unique' => FALSE,
		),
		'13' => array(
		  'source' => 'channel_name',
		  'target' => 'field_channel_name',
		  'unique' => FALSE,
		),
        '14' => array(
          'source' => 'pid',
          'target' => 'guid',
          'unique' => 1,
        ),		
      ),
      'author' => '1',
    ),
  ),
  'content_type' => '',
  'update' => 1,
  'import_period' => '0', 
  'expire_period' => 3600,
  'import_on_create' => 1,
);

  $export['p2pnext_programme_importer'] = $feeds_importer;
  return $export;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function p2pnextprogrammefeed_ctools_plugin_api($module='',$api='') {
  if ($module == "feeds" && $api == "feeds_importer_default") {
    return array("version" => 1);
  }
}
